
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         00000274  00860000  00860000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       0000001c  00860274  00860274  000002c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000014  00860290  00860290  000002e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000004  008602a4  008602a4  000002f8  2**2
                  ALLOC
  4 .debug_abbrev 000001db  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000539  00000000  00000000  000004d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000242  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000e0  00000000  00000000  00000c50  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000007d  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00000103  00000000  00000000  00000dad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000067  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  00000f17  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000001ba  00000000  00000000  00000f57  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  00001111  2**0
                  CONTENTS, READONLY

Desensamblado de la sección .text:

00860000 <_ftext>:
  860000:	98 00 00 00 	xor r0,r0,r0
  860004:	d0 00 00 00 	wcsr IE,r0
  860008:	78 01 00 86 	mvhi r1,0x86
  86000c:	38 21 00 00 	ori r1,r1,0x0
  860010:	d0 e1 00 00 	wcsr EBA,r1
  860014:	f8 00 00 03 	calli 860020 <_crt0>
  860018:	34 00 00 00 	nop
  86001c:	34 00 00 00 	nop

00860020 <_crt0>:
  860020:	78 1c 00 86 	mvhi sp,0x86
  860024:	3b 9c 0f fc 	ori sp,sp,0xffc
  860028:	78 1a 00 86 	mvhi gp,0x86
  86002c:	3b 5a 02 b0 	ori gp,gp,0x2b0
  860030:	78 01 00 86 	mvhi r1,0x86
  860034:	38 21 02 a4 	ori r1,r1,0x2a4
  860038:	78 03 00 86 	mvhi r3,0x86
  86003c:	38 63 02 a8 	ori r3,r3,0x2a8

00860040 <.clearBSS>:
  860040:	44 23 00 04 	be r1,r3,860050 <.callMain>
  860044:	58 20 00 00 	sw (r1+0),r0
  860048:	34 21 00 04 	addi r1,r1,4
  86004c:	e3 ff ff fd 	bi 860040 <.clearBSS>

00860050 <.callMain>:
  860050:	34 01 00 00 	mvi r1,0
  860054:	34 02 00 00 	mvi r2,0
  860058:	34 03 00 00 	mvi r3,0
  86005c:	f8 00 00 0c 	calli 86008c <main>

00860060 <irq_enable>:
  860060:	34 01 00 01 	mvi r1,1
  860064:	d0 01 00 00 	wcsr IE,r1
  860068:	c3 a0 00 00 	ret

0086006c <irq_mask>:
  86006c:	34 01 00 0f 	mvi r1,15
  860070:	d0 21 00 00 	wcsr IM,r1
  860074:	c3 a0 00 00 	ret

00860078 <irq_disable>:
  860078:	34 01 00 00 	mvi r1,0
  86007c:	d0 01 00 00 	wcsr IE,r1
  860080:	c3 a0 00 00 	ret

00860084 <jump>:
  860084:	c0 20 00 00 	b r1

00860088 <halt>:
  860088:	e0 00 00 00 	bi 860088 <halt>

0086008c <main>:
 *
 */
#include "soc-hw.h"

int main(int argc, char **argv)
{
  86008c:	37 9c ff fc 	addi sp,sp,-4
  860090:	5b 9d 00 04 	sw (sp+4),ra
	for(;;)
	{
		i2c_test();
  860094:	f8 00 00 04 	calli 8600a4 <i2c_test>
		sleep(1000);
  860098:	34 01 03 e8 	mvi r1,1000
  86009c:	f8 00 00 2d 	calli 860150 <sleep>
  8600a0:	e3 ff ff fd 	bi 860094 <main+0x8>

008600a4 <i2c_test>:
/*****************************************************************
*I2C Functions
*/
void i2c_test()
{
	i2c0->txr = 0x4B + 1;
  8600a4:	78 01 00 86 	mvhi r1,0x86
  8600a8:	38 21 02 90 	ori r1,r1,0x290
  8600ac:	28 21 00 00 	lw r1,(r1+0)
  8600b0:	34 02 00 4c 	mvi r2,76
  8600b4:	58 22 00 14 	sw (r1+20),r2
	i2c0->cr = 0x90;
  8600b8:	34 02 00 90 	mvi r2,144
  8600bc:	58 22 00 18 	sw (r1+24),r2
	while(!(i2c0->sr & 0x01));
  8600c0:	28 22 00 10 	lw r2,(r1+16)
  8600c4:	20 42 00 01 	andi r2,r2,0x1
  8600c8:	44 40 ff fe 	be r2,r0,8600c0 <i2c_test+0x1c>
	i2c0->txr = 0x00;
  8600cc:	58 20 00 14 	sw (r1+20),r0
	i2c0->cr = 0x10;
  8600d0:	34 02 00 10 	mvi r2,16
  8600d4:	58 22 00 18 	sw (r1+24),r2
	while(!(i2c0->sr & 0x01));
  8600d8:	28 22 00 10 	lw r2,(r1+16)
  8600dc:	20 42 00 01 	andi r2,r2,0x1
  8600e0:	44 40 ff fe 	be r2,r0,8600d8 <i2c_test+0x34>
	i2c0->txr = 0x4B;
  8600e4:	34 02 00 4b 	mvi r2,75
  8600e8:	58 22 00 14 	sw (r1+20),r2
	i2c0->cr = 0x90;
  8600ec:	34 02 00 90 	mvi r2,144
  8600f0:	58 22 00 18 	sw (r1+24),r2
	while(!(i2c0->sr & 0x01));
  8600f4:	28 22 00 10 	lw r2,(r1+16)
  8600f8:	20 42 00 01 	andi r2,r2,0x1
  8600fc:	44 40 ff fe 	be r2,r0,8600f4 <i2c_test+0x50>
	i2c0->cr = 0x20;
  860100:	34 02 00 20 	mvi r2,32
  860104:	58 22 00 18 	sw (r1+24),r2
	while(!(i2c0->sr & 0x01));
  860108:	28 22 00 10 	lw r2,(r1+16)
  86010c:	20 42 00 01 	andi r2,r2,0x1
  860110:	44 40 ff fe 	be r2,r0,860108 <i2c_test+0x64>
	i2c0->cr = 0x28;
  860114:	34 02 00 28 	mvi r2,40
  860118:	58 22 00 18 	sw (r1+24),r2
}
  86011c:	c3 a0 00 00 	ret

00860120 <spi_test>:
/*****************************************************************
*SPI Functions
*/
void spi_test()
{
 spi0->ssr=0xAAAA;
  860120:	78 01 00 86 	mvhi r1,0x86
  860124:	38 21 02 94 	ori r1,r1,0x294
  860128:	28 21 00 00 	lw r1,(r1+0)
  86012c:	38 02 aa aa 	mvu r2,0xaaaa
  860130:	58 22 00 10 	sw (r1+16),r2
}
  860134:	c3 a0 00 00 	ret

00860138 <gpio_test>:
/*****************************************************************
*GPIO Functions
*/
void gpio_test()
{
 gpio0->out=0xA;
  860138:	78 01 00 86 	mvhi r1,0x86
  86013c:	38 21 02 98 	ori r1,r1,0x298
  860140:	28 21 00 00 	lw r1,(r1+0)
  860144:	34 02 00 0a 	mvi r2,10
  860148:	58 22 00 04 	sw (r1+4),r2
}
  86014c:	c3 a0 00 00 	ret

00860150 <sleep>:
void sleep(int msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
  860150:	78 04 00 86 	mvhi r4,0x86
  860154:	38 84 02 74 	ori r4,r4,0x274
  860158:	28 83 00 00 	lw r3,(r4+0)
  86015c:	78 02 00 86 	mvhi r2,0x86
  860160:	38 42 02 9c 	ori r2,r2,0x29c
  860164:	28 42 00 00 	lw r2,(r2+0)
  860168:	88 23 08 00 	mul r1,r1,r3
  86016c:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
  860170:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN | TIMER_IRQEN;
  860174:	34 01 00 0a 	mvi r1,10
  860178:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
  86017c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
  860180:	20 21 00 01 	andi r1,r1,0x1
  860184:	44 20 ff fe 	be r1,r0,86017c <sleep+0x2c>
}
  860188:	c3 a0 00 00 	ret

0086018c <tic_init>:

void tic_init()
{
	// Setup timer0.0
	timer0->compare0 = (FCPU/1000);
  86018c:	78 01 00 86 	mvhi r1,0x86
  860190:	78 03 00 86 	mvhi r3,0x86
  860194:	38 21 02 9c 	ori r1,r1,0x29c
  860198:	38 63 02 74 	ori r3,r3,0x274
  86019c:	28 21 00 00 	lw r1,(r1+0)
  8601a0:	28 62 00 00 	lw r2,(r3+0)
  8601a4:	58 22 00 04 	sw (r1+4),r2
	timer0->counter0 = 0;
  8601a8:	58 20 00 08 	sw (r1+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
  8601ac:	34 02 00 0e 	mvi r2,14
  8601b0:	58 22 00 00 	sw (r1+0),r2
}
  8601b4:	c3 a0 00 00 	ret

008601b8 <timer_test>:


void timer_test()
{
  8601b8:	37 9c ff fc 	addi sp,sp,-4
  8601bc:	5b 9d 00 04 	sw (sp+4),ra
	sleep(1000);
  8601c0:	34 01 03 e8 	mvi r1,1000
  8601c4:	fb ff ff e3 	calli 860150 <sleep>
}
  8601c8:	2b 9d 00 04 	lw ra,(sp+4)
  8601cc:	37 9c 00 04 	addi sp,sp,4
  8601d0:	c3 a0 00 00 	ret

008601d4 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
  8601d4:	c3 a0 00 00 	ret

008601d8 <uart_getchar>:

char uart_getchar()
{   
  8601d8:	78 01 00 86 	mvhi r1,0x86
  8601dc:	38 21 02 a0 	ori r1,r1,0x2a0
  8601e0:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
  8601e4:	28 41 00 00 	lw r1,(r2+0)
  8601e8:	20 21 00 01 	andi r1,r1,0x1
  8601ec:	44 20 ff fe 	be r1,r0,8601e4 <uart_getchar+0xc>
	return uart0->rxtx;
  8601f0:	28 41 00 04 	lw r1,(r2+4)
}
  8601f4:	20 21 00 ff 	andi r1,r1,0xff
  8601f8:	c3 a0 00 00 	ret

008601fc <uart_putchar>:

void uart_putchar(char c)
{
  8601fc:	78 02 00 86 	mvhi r2,0x86
  860200:	38 42 02 a0 	ori r2,r2,0x2a0
  860204:	28 43 00 00 	lw r3,(r2+0)
  860208:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
  86020c:	28 62 00 00 	lw r2,(r3+0)
  860210:	20 42 00 10 	andi r2,r2,0x10
  860214:	5c 40 ff fe 	bne r2,r0,86020c <uart_putchar+0x10>
	uart0->rxtx = c;
  860218:	58 61 00 04 	sw (r3+4),r1
}
  86021c:	c3 a0 00 00 	ret

00860220 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
  860220:	40 24 00 00 	lbu r4,(r1+0)
  860224:	44 80 00 0b 	be r4,r0,860250 <uart_putstr+0x30>
  860228:	78 02 00 86 	mvhi r2,0x86
  86022c:	38 42 02 a0 	ori r2,r2,0x2a0
  860230:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
  860234:	28 62 00 00 	lw r2,(r3+0)
  860238:	20 42 00 10 	andi r2,r2,0x10
  86023c:	5c 40 ff fe 	bne r2,r0,860234 <uart_putstr+0x14>
	uart0->rxtx = c;
  860240:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
  860244:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
  860248:	40 24 00 00 	lbu r4,(r1+0)
  86024c:	5c 82 ff fa 	bne r4,r2,860234 <uart_putstr+0x14>
  860250:	c3 a0 00 00 	ret

00860254 <uart_test>:
		c++;
	}
}

void uart_test()
{
  860254:	37 9c ff fc 	addi sp,sp,-4
  860258:	5b 9d 00 04 	sw (sp+4),ra
	uart_putstr("Hola_prueba_uart_test\r\n");
  86025c:	78 01 00 86 	mvhi r1,0x86
  860260:	38 21 02 78 	ori r1,r1,0x278
  860264:	fb ff ff ef 	calli 860220 <uart_putstr>
}
  860268:	2b 9d 00 04 	lw ra,(sp+4)
  86026c:	37 9c 00 04 	addi sp,sp,4
  860270:	c3 a0 00 00 	ret
