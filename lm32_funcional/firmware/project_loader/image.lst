
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         000001f0  00860000  00860000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000018  008601f0  008601f0  00000244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000014  00860208  00860208  0000025c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000004  0086021c  0086021c  00000270  2**2
                  ALLOC
  4 .debug_abbrev 0000020e  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000539  00000000  00000000  0000047e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001ce  00000000  00000000  000009b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b0  00000000  00000000  00000b88  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000bb  00000000  00000000  00000c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000000dc  00000000  00000000  00000cf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000008b  00000000  00000000  00000dcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  00000e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000001b2  00000000  00000000  00000e9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY

Desensamblado de la sección .text:

00860000 <_ftext>:
  860000:	98 00 00 00 	xor r0,r0,r0
  860004:	d0 00 00 00 	wcsr IE,r0
  860008:	78 01 00 86 	mvhi r1,0x86
  86000c:	38 21 00 00 	ori r1,r1,0x0
  860010:	d0 e1 00 00 	wcsr EBA,r1
  860014:	f8 00 00 03 	calli 860020 <_crt0>
  860018:	34 00 00 00 	nop
  86001c:	34 00 00 00 	nop

00860020 <_crt0>:
  860020:	78 1c 00 86 	mvhi sp,0x86
  860024:	3b 9c 0f fc 	ori sp,sp,0xffc
  860028:	78 1a 00 86 	mvhi gp,0x86
  86002c:	3b 5a 02 20 	ori gp,gp,0x220
  860030:	78 01 00 86 	mvhi r1,0x86
  860034:	38 21 02 1c 	ori r1,r1,0x21c
  860038:	78 03 00 86 	mvhi r3,0x86
  86003c:	38 63 02 20 	ori r3,r3,0x220

00860040 <.clearBSS>:
  860040:	44 23 00 04 	be r1,r3,860050 <.callMain>
  860044:	58 20 00 00 	sw (r1+0),r0
  860048:	34 21 00 04 	addi r1,r1,4
  86004c:	e3 ff ff fd 	bi 860040 <.clearBSS>

00860050 <.callMain>:
  860050:	34 01 00 00 	mvi r1,0
  860054:	34 02 00 00 	mvi r2,0
  860058:	34 03 00 00 	mvi r3,0
  86005c:	f8 00 00 1c 	calli 8600cc <main>

00860060 <irq_enable>:
  860060:	34 01 00 01 	mvi r1,1
  860064:	d0 01 00 00 	wcsr IE,r1
  860068:	c3 a0 00 00 	ret

0086006c <irq_mask>:
  86006c:	34 01 00 0f 	mvi r1,15
  860070:	d0 21 00 00 	wcsr IM,r1
  860074:	c3 a0 00 00 	ret

00860078 <irq_disable>:
  860078:	34 01 00 00 	mvi r1,0
  86007c:	d0 01 00 00 	wcsr IE,r1
  860080:	c3 a0 00 00 	ret

00860084 <jump>:
  860084:	c0 20 00 00 	b r1

00860088 <halt>:
  860088:	e0 00 00 00 	bi 860088 <halt>

0086008c <read_uint32>:
 */
#include "soc-hw.h"

/* prototypes */
uint32_t read_uint32()
{
  86008c:	37 9c ff f4 	addi sp,sp,-12
  860090:	5b 8b 00 0c 	sw (sp+12),r11
  860094:	5b 8c 00 08 	sw (sp+8),r12
  860098:	5b 9d 00 04 	sw (sp+4),ra
  86009c:	34 0b 00 04 	mvi r11,4
	uint32_t val = 0, i;
  8600a0:	34 01 00 00 	mvi r1,0

    for (i = 0; i < 4; i++) {
        val <<= 8;
  8600a4:	3c 2c 00 08 	sli r12,r1,8
        val += (uint8_t)uart_getchar();
  8600a8:	35 6b ff ff 	addi r11,r11,-1
  8600ac:	f8 00 00 32 	calli 860174 <uart_getchar>
  8600b0:	b4 2c 08 00 	add r1,r1,r12
/* prototypes */
uint32_t read_uint32()
{
	uint32_t val = 0, i;

    for (i = 0; i < 4; i++) {
  8600b4:	5d 60 ff fc 	bne r11,r0,8600a4 <read_uint32+0x18>
        val <<= 8;
        val += (uint8_t)uart_getchar();
    }

    return val;
}
  8600b8:	2b 9d 00 04 	lw ra,(sp+4)
  8600bc:	2b 8b 00 0c 	lw r11,(sp+12)
  8600c0:	2b 8c 00 08 	lw r12,(sp+8)
  8600c4:	37 9c 00 0c 	addi sp,sp,12
  8600c8:	c3 a0 00 00 	ret

008600cc <main>:

int main(int argc, char **argv)
{
  8600cc:	37 9c ff f8 	addi sp,sp,-8
  8600d0:	5b 8b 00 08 	sw (sp+8),r11
  8600d4:	5b 9d 00 04 	sw (sp+4),ra
  8600d8:	78 0b 00 86 	mvhi r11,0x86
	uint8_t  c;

	// Initialize UART

	c = '*'; // print msg on first iteration
	gpio_test();
  8600dc:	f8 00 00 1f 	calli 860158 <gpio_test>
  8600e0:	39 6b 01 f0 	ori r11,r11,0x1f0
    		case 'g': // goto
    			start = read_uint32();
    			jump(start);
    			break;   
			default:
				uart_putstr("Raul carechimba \r\n");
  8600e4:	b9 60 08 00 	mv r1,r11
  8600e8:	f8 00 00 35 	calli 8601bc <uart_putstr>
  8600ec:	e3 ff ff fe 	bi 8600e4 <main+0x18>

008600f0 <sleep>:
void sleep(int msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
  8600f0:	78 04 00 86 	mvhi r4,0x86
  8600f4:	38 84 02 04 	ori r4,r4,0x204
  8600f8:	28 83 00 00 	lw r3,(r4+0)
  8600fc:	78 02 00 86 	mvhi r2,0x86
  860100:	38 42 02 14 	ori r2,r2,0x214
  860104:	28 42 00 00 	lw r2,(r2+0)
  860108:	88 23 08 00 	mul r1,r1,r3
  86010c:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
  860110:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN | TIMER_IRQEN;
  860114:	34 01 00 0a 	mvi r1,10
  860118:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
  86011c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
  860120:	20 21 00 01 	andi r1,r1,0x1
  860124:	44 20 ff fe 	be r1,r0,86011c <sleep+0x2c>
}
  860128:	c3 a0 00 00 	ret

0086012c <tic_init>:

void tic_init()
{
	// Setup timer0.0
	timer0->compare0 = (FCPU/1000);
  86012c:	78 01 00 86 	mvhi r1,0x86
  860130:	78 03 00 86 	mvhi r3,0x86
  860134:	38 21 02 14 	ori r1,r1,0x214
  860138:	38 63 02 04 	ori r3,r3,0x204
  86013c:	28 21 00 00 	lw r1,(r1+0)
  860140:	28 62 00 00 	lw r2,(r3+0)
  860144:	58 22 00 04 	sw (r1+4),r2
	timer0->counter0 = 0;
  860148:	58 20 00 08 	sw (r1+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
  86014c:	34 02 00 0e 	mvi r2,14
  860150:	58 22 00 00 	sw (r1+0),r2
}
  860154:	c3 a0 00 00 	ret

00860158 <gpio_test>:
/*****************************************************************
*GPIO
*/
void gpio_test()
{
 gpio0->out=0xA;
  860158:	78 01 00 86 	mvhi r1,0x86
  86015c:	38 21 02 10 	ori r1,r1,0x210
  860160:	28 21 00 00 	lw r1,(r1+0)
  860164:	34 02 00 0a 	mvi r2,10
  860168:	58 22 00 04 	sw (r1+4),r2
}
  86016c:	c3 a0 00 00 	ret

00860170 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
  860170:	c3 a0 00 00 	ret

00860174 <uart_getchar>:

char uart_getchar()
{   
  860174:	78 01 00 86 	mvhi r1,0x86
  860178:	38 21 02 18 	ori r1,r1,0x218
  86017c:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
  860180:	28 41 00 00 	lw r1,(r2+0)
  860184:	20 21 00 01 	andi r1,r1,0x1
  860188:	44 20 ff fe 	be r1,r0,860180 <uart_getchar+0xc>
	return uart0->rxtx;
  86018c:	28 41 00 04 	lw r1,(r2+4)
}
  860190:	20 21 00 ff 	andi r1,r1,0xff
  860194:	c3 a0 00 00 	ret

00860198 <uart_putchar>:

void uart_putchar(char c)
{
  860198:	78 02 00 86 	mvhi r2,0x86
  86019c:	38 42 02 18 	ori r2,r2,0x218
  8601a0:	28 43 00 00 	lw r3,(r2+0)
  8601a4:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
  8601a8:	28 62 00 00 	lw r2,(r3+0)
  8601ac:	20 42 00 10 	andi r2,r2,0x10
  8601b0:	5c 40 ff fe 	bne r2,r0,8601a8 <uart_putchar+0x10>
	uart0->rxtx = c;
  8601b4:	58 61 00 04 	sw (r3+4),r1
}
  8601b8:	c3 a0 00 00 	ret

008601bc <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
  8601bc:	40 24 00 00 	lbu r4,(r1+0)
  8601c0:	44 80 00 0b 	be r4,r0,8601ec <uart_putstr+0x30>
  8601c4:	78 02 00 86 	mvhi r2,0x86
  8601c8:	38 42 02 18 	ori r2,r2,0x218
  8601cc:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
  8601d0:	28 62 00 00 	lw r2,(r3+0)
  8601d4:	20 42 00 10 	andi r2,r2,0x10
  8601d8:	5c 40 ff fe 	bne r2,r0,8601d0 <uart_putstr+0x14>
	uart0->rxtx = c;
  8601dc:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
  8601e0:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
  8601e4:	40 24 00 00 	lbu r4,(r1+0)
  8601e8:	5c 82 ff fa 	bne r4,r2,8601d0 <uart_putstr+0x14>
  8601ec:	c3 a0 00 00 	ret
